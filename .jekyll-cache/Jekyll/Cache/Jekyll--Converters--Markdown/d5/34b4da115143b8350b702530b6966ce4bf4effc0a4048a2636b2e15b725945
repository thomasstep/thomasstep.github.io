I"un<p>While working on my side project I came across a use case for needing authorization in place for all of my various GraphQL queries and mutations. For the sake of this post, I will use an example of a library where certain users are allowed to create, read, and update books (I might not get that far into it, but we will see what happens). As a library of high esteem, we do not want to let just anyone be able to operate on the books. This will pretty much just be an extension of the first example given on <a href="https://www.apollographql.com/docs/apollo-server/getting-started/">Apollo Serverâ€™s website</a>. <a href="https://github.com/thomasstep/apolloEndpointAuth">I do have working code that you are welcome to reference while you read through the article</a>.</p>

<p>I had learned about <a href="https://www.apollographql.com/docs/apollo-server/integrations/plugins/">plugins for Apollo</a> a little while back and I had minor exposure to creating them. They are pretty nifty now that I have used them a little more extensively. The whole idea is that you can <a href="https://github.com/apollographql/apollo-server/blob/main/docs/source/integrations/plugins.md">trigger certain logic based on events</a>. The only catch for me was how you filter down to a particular event. Apollo has a <a href="https://www.apollographql.com/docs/apollo-server/integrations/plugins/#request-lifecycle-event-flow">flow chart that on their website</a> that can help you figure out exactly how the events get fired off. Youâ€™ll notice in that flow chart that <code class="language-plaintext highlighter-rouge">requestDidStart</code> is boxed in pink as opposed to the purple of the other events. Thatâ€™s because <code class="language-plaintext highlighter-rouge">requestDidStart</code> is special. Every plugin must first return <code class="language-plaintext highlighter-rouge">requestDidStart</code> and then return whatever event underneath <code class="language-plaintext highlighter-rouge">requestDidStart</code> that it wants to be triggered by. Itâ€™s weird and it took me a minute to wrap my head around. Iâ€™m going to go ahead and dive into some code but come back here after you read the code to make sure you understand whatâ€™s going on.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">authPlugin</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">requestDidStart</span><span class="p">(</span><span class="nx">requestContext</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="p">{</span>
        <span class="na">context</span><span class="p">:</span> <span class="nx">apolloContext</span><span class="p">,</span>
        <span class="na">request</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">variables</span><span class="p">:</span> <span class="nx">requestVariables</span><span class="p">,</span>
        <span class="p">},</span>
      <span class="p">}</span> <span class="o">=</span> <span class="nx">requestContext</span><span class="p">;</span>

      <span class="k">return</span> <span class="p">{</span>
        <span class="nx">didResolveOperation</span><span class="p">(</span><span class="nx">resolutionContext</span><span class="p">)</span> <span class="p">{</span>
          <span class="kd">const</span> <span class="p">{</span> <span class="nx">user</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">apolloContext</span><span class="p">;</span>

          <span class="nx">resolutionContext</span><span class="p">.</span><span class="nx">operation</span><span class="p">.</span><span class="nx">selectionSet</span><span class="p">.</span><span class="nx">selections</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">selection</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="p">{</span> <span class="na">value</span><span class="p">:</span> <span class="nx">operationName</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">selection</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">operationName</span><span class="p">);</span>
          <span class="p">});</span>
        <span class="p">},</span>
      <span class="p">};</span>
    <span class="p">},</span>
  <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This is the beginning of my auth plugin. Like I said before this returns <code class="language-plaintext highlighter-rouge">requestDidStart</code> and <code class="language-plaintext highlighter-rouge">requestDidStart</code> returns the other event(s) that I want to act on, which is only <code class="language-plaintext highlighter-rouge">didResolveOperation</code> for this plugin. Within <code class="language-plaintext highlighter-rouge">requestDidStart</code>, you have the opportunity to pull out some special information from the caller. You can grab the context created when you created the server and you can grab the variables sent with the request. Iâ€™ll go ahead and show you how I am initializing the server, so you can just copy and paste if you want to follow along.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">apolloServer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ApolloServer</span><span class="p">({</span>
  <span class="nx">typeDefs</span><span class="p">,</span>
  <span class="nx">resolvers</span><span class="p">,</span>
  <span class="na">context</span><span class="p">:</span> <span class="p">(</span><span class="nx">ctx</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">ctx</span><span class="p">.</span><span class="nx">user</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">J. R. R. Tolkien</span><span class="dl">'</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">ctx</span><span class="p">;</span>
  <span class="p">},</span>
  <span class="na">plugins</span><span class="p">:</span> <span class="p">[</span>
    <span class="nx">authPlugin</span><span class="p">,</span>
  <span class="p">],</span>
<span class="p">});</span>

<span class="nx">apolloServer</span><span class="p">.</span><span class="nx">listen</span><span class="p">().</span><span class="nx">then</span><span class="p">(({</span> <span class="nx">url</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`ðŸš€  Server ready at </span><span class="p">${</span><span class="nx">url</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>You can create a list of plugins so feel free to break them up as you see fit.</p>

<p>If you have been following along so far and you have started based on the Apollo tutorial I linked at the beginning, then you should be able to query your server and see the logs for the contextâ€™s user as <code class="language-plaintext highlighter-rouge">J. R. R. Tolkien</code> and the <code class="language-plaintext highlighter-rouge">operationName</code> as <code class="language-plaintext highlighter-rouge">books</code>. Now that we have a plugin set up that can be triggered off of whatever gets passed in, letâ€™s start adding in some authorization logic. To keep the post centered around plugins and the authorization logic, I am going to move forward with the same <code class="language-plaintext highlighter-rouge">book</code> query and just hardcode different <code class="language-plaintext highlighter-rouge">context.user</code>s in order to test. In addition, I will use a query called <code class="language-plaintext highlighter-rouge">parrot</code> that returns the string that you pass in as a parameter called <code class="language-plaintext highlighter-rouge">word</code> to show some additional information that you can pull out of the plugins. The resolver code for that looks like <code class="language-plaintext highlighter-rouge">parrot: (parent, args) =&gt; args.word</code>, just paste that into the <code class="language-plaintext highlighter-rouge">resolvers.Query</code> object that is given in the Apollo tutorial and add <code class="language-plaintext highlighter-rouge">parrot(word: String!): String!</code> to the <code class="language-plaintext highlighter-rouge">typeDefs</code>.</p>

<p>Now that we have two queries, I want to authorize only J. R. R. Tolkien to access the <code class="language-plaintext highlighter-rouge">books</code> query and allow anyone to acccess the <code class="language-plaintext highlighter-rouge">parrot</code> query. To do that I am going to create a mapping from different operations to different authorization logic functions. I will use a function called <code class="language-plaintext highlighter-rouge">endpointAuth</code> to do that. I will also create two helping functions for the authorization logic called <code class="language-plaintext highlighter-rouge">booksAuth</code> and <code class="language-plaintext highlighter-rouge">parrotAuth</code>.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">AuthenticationError</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">apollo-server</span><span class="dl">"</span><span class="p">);</span>

<span class="kd">function</span> <span class="nx">booksAuth</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">validUsers</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">J. R. R. Tolkien</span><span class="dl">'</span><span class="p">];</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">validUsers</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">user</span><span class="p">))</span> <span class="k">return</span><span class="p">;</span>

  <span class="k">throw</span> <span class="k">new</span> <span class="nx">AuthenticationError</span><span class="p">(</span><span class="dl">'</span><span class="s1">You are not authorized to use this endpoint.</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">parrotAuth</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">endpointAuth</span><span class="p">(</span><span class="nx">endpoint</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="p">(</span><span class="nx">endpoint</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="dl">'</span><span class="s1">books</span><span class="dl">'</span><span class="p">:</span>
      <span class="nx">booksAuth</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
      <span class="k">break</span><span class="p">;</span>

    <span class="k">case</span> <span class="dl">'</span><span class="s1">parrot</span><span class="dl">'</span><span class="p">:</span>
      <span class="nx">parrotAuth</span><span class="p">();</span>
      <span class="k">break</span><span class="p">;</span>

    <span class="nl">default</span><span class="p">:</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nx">AuthenticationError</span><span class="p">(</span><span class="dl">'</span><span class="s1">Unknown endpoint.</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>If you try using the endpoints, you should be allowed to, but if you change the hardcoded <code class="language-plaintext highlighter-rouge">J. R. R. Tolkien</code> name in the context to something else, the <code class="language-plaintext highlighter-rouge">AuthenticationError</code> will be thrown stopping the execution. Since this all runs before any resolver logic, you can stop a user before they use a particular endpoint they are not supposed to. Of course, for this to make the most sense, I suggest querying your database while building the context to get the actual userâ€™s information before this is run. Either way, we now know how to stop someone from querying something that we do not want them to. This is the main point that I wanted to get across. As a bonus, I will show you how to create a scaffolding for logic based on the input given.</p>

<p>Letâ€™s say that someone is querying parrot, but we only want to support a given whitelist of words that are allowed to be echoed. Iâ€™m thinking of a query that looks something like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>query parrotQuery(
  $word: String!
) {
  parrot(word: $word)
}

variables: {
  "word": "badword"
}
</code></pre></div></div>

<p>We will need to first do some work before we ever call <code class="language-plaintext highlighter-rouge">parrotAuth</code> to make sure that we have the correct input. There are some <a href="https://github.com/apollographql/apollo-server/blob/main/packages/apollo-server-types/src/index.ts">weird structures that get passed down to the plugins</a> that I ended up logging to make sense of. I am going to spare you that trouble and go ahead and just show the functions I have already created to parse out all that madness. They are called <code class="language-plaintext highlighter-rouge">flattenArgs</code> and <code class="language-plaintext highlighter-rouge">handleValue</code>. The <code class="language-plaintext highlighter-rouge">flattenArgs</code> function will loop through the arguments passed in and then called <code class="language-plaintext highlighter-rouge">handleValue</code> where appropriate. The <code class="language-plaintext highlighter-rouge">handleValue</code> function either can do some sort of data transformation on a specific type (like casting from a string to a number for <code class="language-plaintext highlighter-rouge">IntValue</code>) or map a variable value to the appropriate given value. Here is the code to do that.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">handleValue</span><span class="p">(</span><span class="nx">argValue</span><span class="p">,</span> <span class="nx">requestVariables</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span>
    <span class="nx">kind</span><span class="p">,</span>
  <span class="p">}</span> <span class="o">=</span> <span class="nx">argValue</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">val</span><span class="p">;</span>

  <span class="k">switch</span> <span class="p">(</span><span class="nx">kind</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="dl">'</span><span class="s1">IntValue</span><span class="dl">'</span><span class="p">:</span>
      <span class="nx">val</span> <span class="o">=</span> <span class="nx">argValue</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>

    <span class="k">case</span> <span class="dl">'</span><span class="s1">StringValue</span><span class="dl">'</span><span class="p">:</span>
      <span class="nx">val</span> <span class="o">=</span> <span class="nx">argValue</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>

    <span class="k">case</span> <span class="dl">'</span><span class="s1">Variable</span><span class="dl">'</span><span class="p">:</span>
      <span class="nx">val</span> <span class="o">=</span> <span class="nx">requestVariables</span><span class="p">[</span><span class="nx">argValue</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">value</span><span class="p">];</span>
      <span class="k">break</span><span class="p">;</span>

    <span class="nl">default</span><span class="p">:</span>
      <span class="c1">// If I haven't come across it yet, hopefully it just works...</span>
      <span class="nx">val</span> <span class="o">=</span> <span class="nx">argValue</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">val</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">flattenArgs</span><span class="p">(</span><span class="nx">apolloArgs</span><span class="p">,</span> <span class="nx">requestVariables</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">args</span> <span class="o">=</span> <span class="p">{};</span>

  <span class="nx">apolloArgs</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">apolloArg</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">apolloArg</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span>
    <span class="kd">const</span> <span class="p">{</span>
      <span class="nx">kind</span><span class="p">,</span>
      <span class="na">name</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">value</span><span class="p">:</span> <span class="nx">argName</span><span class="p">,</span>
      <span class="p">},</span>
      <span class="na">value</span><span class="p">:</span> <span class="nx">argValue</span><span class="p">,</span>
    <span class="p">}</span> <span class="o">=</span> <span class="nx">apolloArg</span><span class="p">;</span>

    <span class="k">switch</span> <span class="p">(</span><span class="nx">kind</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">case</span> <span class="dl">'</span><span class="s1">Argument</span><span class="dl">'</span><span class="p">:</span>
        <span class="nx">args</span><span class="p">[</span><span class="nx">argName</span><span class="p">]</span> <span class="o">=</span> <span class="nx">handleValue</span><span class="p">(</span><span class="nx">argValue</span><span class="p">,</span> <span class="nx">requestVariables</span><span class="p">);</span>
        <span class="k">break</span><span class="p">;</span>

      <span class="nl">default</span><span class="p">:</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">});</span>

  <span class="k">return</span> <span class="nx">args</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Also I changed the <code class="language-plaintext highlighter-rouge">authPlugin</code> function to format and then pass these values on. It now looks like this.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">authPlugin</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">requestDidStart</span><span class="p">(</span><span class="nx">requestContext</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="p">{</span>
        <span class="na">context</span><span class="p">:</span> <span class="nx">apolloContext</span><span class="p">,</span>
        <span class="na">request</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">variables</span><span class="p">:</span> <span class="nx">requestVariables</span><span class="p">,</span>
        <span class="p">},</span>
      <span class="p">}</span> <span class="o">=</span> <span class="nx">requestContext</span><span class="p">;</span>

      <span class="k">return</span> <span class="p">{</span>
        <span class="nx">didResolveOperation</span><span class="p">(</span><span class="nx">resolutionContext</span><span class="p">)</span> <span class="p">{</span>
          <span class="kd">const</span> <span class="p">{</span> <span class="nx">user</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">apolloContext</span><span class="p">;</span>

          <span class="nx">resolutionContext</span><span class="p">.</span><span class="nx">operation</span><span class="p">.</span><span class="nx">selectionSet</span><span class="p">.</span><span class="nx">selections</span><span class="p">.</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">selection</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="p">{</span> <span class="na">value</span><span class="p">:</span> <span class="nx">operationName</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">selection</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
            <span class="kd">const</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">flattenArgs</span><span class="p">(</span><span class="nx">selection</span><span class="p">.</span><span class="nx">arguments</span><span class="p">,</span> <span class="nx">requestVariables</span><span class="p">);</span>
            <span class="nx">endpointAuth</span><span class="p">(</span><span class="nx">operationName</span><span class="p">,</span> <span class="nx">user</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
          <span class="p">});</span>
        <span class="p">},</span>
      <span class="p">};</span>
    <span class="p">},</span>
  <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<p>I can pass those <code class="language-plaintext highlighter-rouge">args</code> down to <code class="language-plaintext highlighter-rouge">parrotAuth</code> and make sure that a user is allowed to call the query with those specific <code class="language-plaintext highlighter-rouge">args</code>.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">parrotAuth</span><span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">validUsers</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">J. R. R. Tolkien</span><span class="dl">'</span><span class="p">];</span>
  <span class="kd">const</span> <span class="nx">dictionary</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">Frodo</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Gandalf</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Legolas</span><span class="dl">'</span><span class="p">];</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">validUsers</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">dictionary</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">word</span><span class="p">))</span> <span class="k">return</span><span class="p">;</span>

  <span class="k">throw</span> <span class="k">new</span> <span class="nx">AuthenticationError</span><span class="p">(</span><span class="dl">'</span><span class="s1">You are not authorized to use that word.</span><span class="dl">'</span><span class="p">);</span>

  <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">endpointAuth</span><span class="p">(</span><span class="nx">endpoint</span><span class="p">,</span> <span class="nx">user</span><span class="p">,</span> <span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="p">(</span><span class="nx">endpoint</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="dl">'</span><span class="s1">books</span><span class="dl">'</span><span class="p">:</span>
      <span class="nx">booksAuth</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
      <span class="k">break</span><span class="p">;</span>

    <span class="k">case</span> <span class="dl">'</span><span class="s1">parrot</span><span class="dl">'</span><span class="p">:</span>
      <span class="nx">parrotAuth</span><span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="nx">args</span><span class="p">);</span>
      <span class="k">break</span><span class="p">;</span>

    <span class="nl">default</span><span class="p">:</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nx">AuthenticationError</span><span class="p">(</span><span class="dl">'</span><span class="s1">Unknown endpoint.</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The authorization logic itself is not great and only for example purposes because it is all hardcoded. I have used this in my project to pull in the user, pull in the arguments, and make sure that the user can act on the given arguments. One use case could be having a randomly generated GUID represent a book and the user that is passed in from the context could also have a list of books that the user is allowed to operate on. You could check the arguments to make sure that the given GUID is present in the array of books for authorized operation. This can get more dynamic once you hook in a database and API calls to add books to a userâ€™s list of authorized-to-operate-on books.</p>

<p>The main goal of this was mostly to get code snippets out there to show how to create Apollo plugins, how to parse through the input given to the plugins, and a brief overview of how you could build a scaffold around authorization logic. As I said, I have used this with success, and I hope you can too.</p>
:ET
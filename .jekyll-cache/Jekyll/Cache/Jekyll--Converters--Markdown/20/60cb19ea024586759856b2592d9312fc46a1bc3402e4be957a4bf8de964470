I"Ù <p><a href="https://thomasstep.dev/blog/i-built-and-published-an-iphone-app">I have been developing an iOS application recently</a> and I needed to receive numeric input from the user. I added a <code class="language-plaintext highlighter-rouge">TextField</code> and changed the <code class="language-plaintext highlighter-rouge">keyboardType</code> to <code class="language-plaintext highlighter-rouge">numberPad</code>, but I also stumbled across someone who took it an extra step and added some validation. I wanted to share what that looked like and also show my twist on it. The simple <code class="language-plaintext highlighter-rouge">TextField</code> with numeric input looks like this.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">TextField</span><span class="p">(</span><span class="s">"Demo text field"</span><span class="p">,</span> <span class="nv">text</span><span class="p">:</span> <span class="err">$</span><span class="n">myInput</span><span class="p">)</span>
  <span class="o">.</span><span class="nf">multilineTextAlignment</span><span class="p">(</span><span class="o">.</span><span class="n">center</span><span class="p">)</span>
  <span class="o">.</span><span class="nf">textFieldStyle</span><span class="p">(</span><span class="kt">RoundedBorderTextFieldStyle</span><span class="p">())</span>
  <span class="o">.</span><span class="nf">keyboardType</span><span class="p">(</span><span class="o">.</span><span class="n">numberPad</span><span class="p">)</span>
</code></pre></div></div>

<p>However, if the user has a Bluetooth keyboard synced with their device or if they are on an iPad (iPads do not support <code class="language-plaintext highlighter-rouge">numberPad</code>) then it is possible for a user to input other characters as well. To combat bad characters being passed in, we can add some validation logic like this.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Combine</span>

<span class="o">...</span>

<span class="kt">TextField</span><span class="p">(</span><span class="s">"Demo text field"</span><span class="p">,</span> <span class="nv">text</span><span class="p">:</span> <span class="err">$</span><span class="n">myInput</span><span class="p">)</span>
  <span class="o">.</span><span class="nf">multilineTextAlignment</span><span class="p">(</span><span class="o">.</span><span class="n">center</span><span class="p">)</span>
  <span class="o">.</span><span class="nf">textFieldStyle</span><span class="p">(</span><span class="kt">RoundedBorderTextFieldStyle</span><span class="p">())</span>
  <span class="o">.</span><span class="nf">keyboardType</span><span class="p">(</span><span class="o">.</span><span class="n">numberPad</span><span class="p">)</span>
  <span class="o">.</span><span class="nf">onReceive</span><span class="p">(</span><span class="kt">Just</span><span class="p">(</span><span class="n">myInput</span><span class="p">))</span> <span class="p">{</span> <span class="n">newValue</span> <span class="k">in</span>
    <span class="k">let</span> <span class="nv">filtered</span> <span class="o">=</span> <span class="n">newValue</span><span class="o">.</span><span class="n">filter</span> <span class="p">{</span>
      <span class="s">"0123456789"</span><span class="o">.</span><span class="nf">contains</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="n">filtered</span> <span class="o">!=</span> <span class="n">newValue</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">desiredPomodoroRounds</span> <span class="o">=</span> <span class="n">filtered</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>It is worth noting that I needed to import <code class="language-plaintext highlighter-rouge">Combine</code> for <code class="language-plaintext highlighter-rouge">Just</code> to work. The <code class="language-plaintext highlighter-rouge">onReceive</code> function allows us to validate the input text as it comes in. What this snippet does is check that only numbers are input, and if another character is found, that character is dropped. I took this a step further still. I was moving from <code class="language-plaintext highlighter-rouge">Slider</code> to <code class="language-plaintext highlighter-rouge">TextField</code> so I wanted to put bounds on the numbers that could be input. My solution was to check for those bounds inside of <code class="language-plaintext highlighter-rouge">onReceive</code> and force the value back inside of my bounds. Since I am expecting a number but want to make input easy, I felt that this was a decent compromise.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Combine</span>

<span class="o">...</span>

<span class="kt">TextField</span><span class="p">(</span><span class="s">"Demo text field"</span><span class="p">,</span> <span class="nv">text</span><span class="p">:</span> <span class="err">$</span><span class="n">myInput</span><span class="p">)</span>
  <span class="o">.</span><span class="nf">multilineTextAlignment</span><span class="p">(</span><span class="o">.</span><span class="n">center</span><span class="p">)</span>
  <span class="o">.</span><span class="nf">textFieldStyle</span><span class="p">(</span><span class="kt">RoundedBorderTextFieldStyle</span><span class="p">())</span>
  <span class="o">.</span><span class="nf">keyboardType</span><span class="p">(</span><span class="o">.</span><span class="n">numberPad</span><span class="p">)</span>
  <span class="o">.</span><span class="nf">onReceive</span><span class="p">(</span><span class="kt">Just</span><span class="p">(</span><span class="n">myInput</span><span class="p">))</span> <span class="p">{</span> <span class="n">newValue</span> <span class="k">in</span>
    <span class="k">let</span> <span class="nv">filtered</span> <span class="o">=</span> <span class="n">newValue</span><span class="o">.</span><span class="n">filter</span> <span class="p">{</span>
      <span class="s">"0123456789"</span><span class="o">.</span><span class="nf">contains</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c1">// Arbitrary default value within bounds</span>
    <span class="k">let</span> <span class="nv">numberValue</span> <span class="o">=</span> <span class="kt">Int</span><span class="p">(</span><span class="n">filtered</span><span class="p">)</span> <span class="p">??</span> <span class="mi">4</span>

    <span class="c1">// Check for lower bound</span>
    <span class="k">if</span> <span class="n">numberValue</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myInput</span> <span class="o">=</span> <span class="s">"1"</span>
    <span class="p">}</span>

    <span class="c1">// Check for upper bound</span>
    <span class="k">if</span> <span class="n">numberValue</span> <span class="o">&gt;</span> <span class="mi">60</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myInput</span> <span class="o">=</span> <span class="s">"20"</span>
    <span class="p">}</span>

    <span class="k">if</span> <span class="n">filtered</span> <span class="o">!=</span> <span class="n">newValue</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myInput</span> <span class="o">=</span> <span class="n">filtered</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The bounds and default value would need to be tailored to each application, but this is a decent (albeit a little hacky) way to put numeric bounds on <code class="language-plaintext highlighter-rouge">TextField</code> input. The nil coalescing operator on the cast (<code class="language-plaintext highlighter-rouge">Int(filtered) ?? 4</code>) also allows for a value to be present if the user just deletes all of the input.</p>
:ET
I"‡1<p>Javascript supports two logical operators, the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND">logical AND <code class="language-plaintext highlighter-rouge">&amp;&amp;</code></a> and the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR">logical OR <code class="language-plaintext highlighter-rouge">||</code></a>.
Both of these logical operators evaluate boolean values and return boolean values.
(There are also bitwise operators for both AND <code class="language-plaintext highlighter-rouge">&amp;</code> and OR <code class="language-plaintext highlighter-rouge">|</code> that treat their operands as 32 bit numbers and return numerical values, but I will not be focusing on those right now.)
The operands used in the logical operators are treated as booleans, and Javascript has some funky stuff going on when it comes to evaluating values as <code class="language-plaintext highlighter-rouge">true</code> or <code class="language-plaintext highlighter-rouge">false</code>, which is all thanks to <a href="https://developer.mozilla.org/en-US/docs/Glossary/truthy">truthy</a> and <a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy">falsy</a>.</p>

<p>I was confused when I first encountered truthy and falsy, but it makes sense what they were going for by adding this into Javascript once you understand it all.
If you think of values like <code class="language-plaintext highlighter-rouge">0</code>, <code class="language-plaintext highlighter-rouge">null</code>, or <code class="language-plaintext highlighter-rouge">undefined</code>, they seem like false values because they are the absence of a value, and even though they are not explicitly the boolean <code class="language-plaintext highlighter-rouge">false</code> Javascript will evaluate them as such under the right conditions.
For example, <code class="language-plaintext highlighter-rouge">0 === ''</code> equates to false in Javascript but <code class="language-plaintext highlighter-rouge">0 == ''</code> equates to true (notice the amount of <code class="language-plaintext highlighter-rouge">=</code> signs).
This is because <code class="language-plaintext highlighter-rouge">===</code> does not convert the operandsâ€™ types; the number <code class="language-plaintext highlighter-rouge">0</code> does not equal an empty string <code class="language-plaintext highlighter-rouge">''</code>.
However, <code class="language-plaintext highlighter-rouge">==</code> does convert the operands types and since <code class="language-plaintext highlighter-rouge">''</code> and <code class="language-plaintext highlighter-rouge">false</code> are both falsy, <code class="language-plaintext highlighter-rouge">0 == ''</code> equates to true.
The different amounts of <code class="language-plaintext highlighter-rouge">=</code> signs are called the Equality and Identity (or Strict Equality) operators and you can read more about them here https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators.
The logical operators act similarly to <code class="language-plaintext highlighter-rouge">==</code> in that they convert non-boolean types to a boolean using truthy or falsy logic.</p>

<p>Coming from a strongly typed language background, I had trouble grappling with the fact that <code class="language-plaintext highlighter-rouge">0 == ''</code> was <code class="language-plaintext highlighter-rouge">true</code> in Javascript whereas C++ would have thrown a fit.
Alas, here we are in the magical land of Javascript.
There are 8 falsy values (check them out here https://developer.mozilla.org/en-US/docs/Glossary/Falsy) and anything that is not a falsy value is truthy.
Circling back to the logical operators, we can use this to our advantage when we are writing code to execute code based on a logical operator like we would a conditional.</p>

<p>Another interesting thing that Javascript does with the logical operators is only evaluate as much as it needs to.
That means if you are using <code class="language-plaintext highlighter-rouge">&amp;&amp;</code> and the first operand is <code class="language-plaintext highlighter-rouge">false</code>, Javascript knows that no matter what the second operand is, the expression will evaluate to <code class="language-plaintext highlighter-rouge">false</code> since AND can only be <code class="language-plaintext highlighter-rouge">true</code> if both operands are <code class="language-plaintext highlighter-rouge">true</code>.
Similarly with <code class="language-plaintext highlighter-rouge">||</code>, if the first operand is <code class="language-plaintext highlighter-rouge">true</code>, the expression returns <code class="language-plaintext highlighter-rouge">true</code> without evaluating the second operand since OR can only be <code class="language-plaintext highlighter-rouge">false</code> if both operands are <code class="language-plaintext highlighter-rouge">false</code>.
(If all of this AND and OR stuff is new or confusing, I would encourage you to learn more about boolean algebra.)</p>

<p>We can use this to our advantage when we are writing code to execute based on a logical operator like we would a conditional that makes sure that one condition is met before executing something else.
Letâ€™s say we have some code that returns some data that may or may not be truthy, we can use logical operators to determine what the next steps would be.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">axios</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">axios</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">function</span> <span class="nx">logFact</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">data</span><span class="p">.</span><span class="nx">used</span> <span class="o">&amp;&amp;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Used fact:</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">data</span><span class="p">.</span><span class="nx">used</span> <span class="o">||</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Unused fact:</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">text</span><span class="p">);</span>
<span class="p">}</span>

<span class="nx">axios</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">https://cat-fact.herokuapp.com/facts/random?amount=1</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">((</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">logFact</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
  <span class="p">});</span>
</code></pre></div></div>

<p><a href="https://alexwohlbruck.github.io/cat-facts/docs/">The documentation for this public API is here.</a>
What you should be focusing on is the logic and logging in <code class="language-plaintext highlighter-rouge">logFact</code>.
The first log that pops up on your terminal when you run this is based on <code class="language-plaintext highlighter-rouge">data.used</code>, which is either <code class="language-plaintext highlighter-rouge">true</code> or <code class="language-plaintext highlighter-rouge">false</code> according to the API documentation.
(When I was testing this out I mostly found <code class="language-plaintext highlighter-rouge">data.used</code> to be <code class="language-plaintext highlighter-rouge">false</code>, so I suggest hardcoding <code class="language-plaintext highlighter-rouge">data.used = true</code> if you want to see the logic work.)
We could even condense the logical operators in <code class="language-plaintext highlighter-rouge">logFact</code> even more just for fun:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">used</span> <span class="o">||</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Unused fact:</span><span class="dl">'</span><span class="p">))</span> <span class="o">&amp;&amp;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Used fact:</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<p>Like I said earlier, this is an example of how to use logical operators instead of conditional statements.
The corresponding conditional statement would look something like this:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">used</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Used fact:</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Unused fact:</span><span class="dl">'</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Another application of the above logic is using a validation function for the first operand.
Something that might look like this:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="nx">validateInput</span><span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">useInput</span><span class="p">(</span><span class="nx">input</span><span class="p">))</span> <span class="o">||</span> <span class="nx">warnUser</span><span class="p">();</span>
</code></pre></div></div>

<p>We can pretend that <code class="language-plaintext highlighter-rouge">validateInput</code> reaches out to a server somewhere to make sure that the user has rights to use the system and it also validates the format of all the input before returning <code class="language-plaintext highlighter-rouge">true</code>.
If anything in the validation goes wrong and <code class="language-plaintext highlighter-rouge">validateInput</code> returns <code class="language-plaintext highlighter-rouge">false</code>, then we will warn the user about the validation failure in <code class="language-plaintext highlighter-rouge">warnUser</code>; otherwise, we will let the input go through to the processing in <code class="language-plaintext highlighter-rouge">useInput</code>.</p>

<p>I have used logical operators with good success with checking the existence of a key in an object before using it and validating a value before using it.
Using the logical operand approach might not always be the most practical depending on the situation, but I think it can be fun to play around with them and use expressions that are not just <code class="language-plaintext highlighter-rouge">true</code> or <code class="language-plaintext highlighter-rouge">false</code> as operands.</p>
:ET
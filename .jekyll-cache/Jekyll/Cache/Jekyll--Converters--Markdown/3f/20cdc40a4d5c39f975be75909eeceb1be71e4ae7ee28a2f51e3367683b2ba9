I"S<p>Git submodules are not useful if you are not creating a very large or integrated project. I think that is probably why I did not use them in college. I like to think of git submodules like packages. Loosely like <code class="language-plaintext highlighter-rouge">pip install</code> for git. By adding a submodule to your git repo you are essentially copy and pasting code into your repo without actually copy and pasting. This means that you don’t have to maintain that code; you just run <code class="language-plaintext highlighter-rouge">git submodule update</code> to get the latest code. I could see this concept being useful for a project with multiple repos and teams. The project could break the pieces out as different repos and then integrate them together using submodules in a larger project. It is worth noting that submodules are taken as a commit hash. If a repo is updated, you will need to run <code class="language-plaintext highlighter-rouge">git submodule update</code> to update that code. Alternatively, you can go into the submodule’s root directory and <code class="language-plaintext highlighter-rouge">git pull</code> then go through the normal <code class="language-plaintext highlighter-rouge">add</code>, <code class="language-plaintext highlighter-rouge">commit</code>, <code class="language-plaintext highlighter-rouge">push</code> workflow. I think this is more a pro than a con because you will never have to worry about the submodule’s team changing something that you rely on in your code without you manually updating it. At least as long as you review the code changes.</p>
:ET